/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.19
 * Generated at: 2019-12-14 13:00:59 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import bookBoard.Book;
import java.sql.*;
import java.util.ArrayList;

public final class SearchQueryMyBook_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("java.sql");
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("bookBoard.Book");
    _jspx_imports_classes.add("java.util.ArrayList");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("<!DOCTYPE html>\n");
      out.write("<html>\n");
      out.write("<head>\n");
      out.write("<meta charset=\"UTF-8\">\n");
      out.write("<title>Insert title here</title>\n");
      out.write("</head>\n");
      out.write("<body>\n");

	response.setContentType("text/html;charset=utf-8");

	String stu_no = (String)session.getAttribute("stu_no");

	///페이징 ///
				final int ROWSIZE = 5; // 한 페이지에 보일 게시물 수
				final int BLOCK = 5; // 아래에 보일 페이지 최대 개수 1~5 / 6 ~ 10 / 11 ~ 15
				int pg = 1; // 기본 페이지 값
				
				if(request.getParameter("pg") != null) { // 받아온 pg 값이 있을 때 .
					pg = Integer.parseInt(request.getParameter("pg")); // pg 값 저장
				}
				int start = (pg*ROWSIZE) - (ROWSIZE -1); // 해당페이지에서 시작 번호 ( DB - SORT )
				int end = (pg*ROWSIZE); // 해당 페이지에서 끝 번호 ( DB - SORT )
				
				int allPage = 0; // 전체 페이지 수
				
				int startPage = ((pg-1)/BLOCK*BLOCK)+1; // 시작 블럭 숫자. 1~5번은 1, 6~10 6
				int endPage = ((pg-1)/BLOCK*BLOCK)+BLOCK; // 끝 블럭 숫자. 1~5번은 5, 6~10 10



	Class.forName("com.mysql.jdbc.Driver");
	
	Connection conn = null;
	Statement stat	= null;
	Statement stat1 = null;
	Statement stat2 = null;
	ResultSet rs 	= null;
	
	String jdbcDriver = "jdbc:mysql://localhost:3306/bookDB?"+
						"useSSl=false&serverTimezone=UTC";
	
	String dbUser = "root";
	String dbPass = "1234";
	int total = 0;
	
	String userChk= "SELECT DISTINCT SELLER FROM BOOKINFO WHERE STU_NO = '" + stu_no + "'";
	
	
	
	//2. 데이터베이스 커넥션 생성
	conn = DriverManager.getConnection(jdbcDriver,dbUser,dbPass);
	
	//3. 쿼리를 위한 Statement 생성
	stat = conn.createStatement();
	stat1 = conn.createStatement();
	stat2 = conn.createStatement();
	
	
	//4. 쿼리 실행.
	ResultSet rs3 = stat.executeQuery(userChk);
	
	String seller = "";
	
	if(rs3.next()){	
		seller = rs3.getString("SELLER");
	}
	
	String keyWord = request.getParameter("keyWord");
	
	String sql = "SELECT * FROM BOOKINFO WHERE SORT >= " + start + " AND SORT <= " + end + " and SELLER = '"+ seller + "' and bookname like '%"+keyWord+"%' ORDER BY SORT";


		String sqlCount = "SELECT COUNT(*) FROM bookinfo";
		ResultSet rs1 = stat.executeQuery(sqlCount);
		
		if(rs1.next()){
			total = rs1.getInt(1);
		}
	
		int sort = 1;
		String sqlSort = "SELECT tradenum FROM bookinfo where seller ='"+seller+"' and bookname like '%"+keyWord+"%' ORDER BY tradenum DESC";
		rs = stat1.executeQuery(sqlSort);
		
		while(rs.next()){
			int stepNum = rs.getInt(1);
			String sqlColumnUpdate = "UPDATE bookinfo SET SORT = " + sort + " WHERE tradenum = " + stepNum + " and seller='"+seller+"' and bookName like '%"+keyWord+"%'";
			stat.executeUpdate(sqlColumnUpdate);
			sort++;
		}
		
		allPage = (int)Math.ceil(total/(double)ROWSIZE);
		
		if(endPage > allPage)
		{
			endPage = allPage;
		}
	
	//4. 쿼리 실행.
	rs = stat.executeQuery(sql);
	
	ArrayList<Book> list = new ArrayList<Book>(); 
	
	while(rs.next()){
		Book book = new Book();
		
		book.setTradeNum(rs.getString(1));
		book.setBookName(rs.getString(2));
		book.setPublisher(rs.getString(3));
		book.setProf(rs.getString(4));
		book.setStatus(rs.getString(5));
		book.setSeller(rs.getString(6));
		book.setSummary(rs.getString(7));
		book.setStu_no(rs.getString(8));
		book.setSeller_tel(rs.getString(9));
		book.setSelStat(rs.getString(11));
		
		list.add(book);
	}
	
	request.setAttribute("list", list);
	
	rs.close();
	rs1.close();
	stat.close();
	stat1.close();
	conn.close();
	
	RequestDispatcher rd = request.getRequestDispatcher("myPage.jsp");
	
	rd.forward(request,response);

      out.write("\n");
      out.write("</body>\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
